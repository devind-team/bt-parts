# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserCountAggregate {
  id: Int!
  username: Int!
  email: Int!
  avatar: Int!
  lastName: Int!
  firstName: Int!
  patronymic: Int!
  isActive: Int!
  companyName: Int!
  tz: Int!
  phone: Int!
  birthday: Int!
  role: Int!
  gender: Int!
  createdAt: Int!
  updatedAt: Int!
  companiesId: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  username: String
  email: String
  avatar: String
  lastName: String
  firstName: String
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companiesId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Role {
  USER
  SELLER
  BUYER
  LOGIST
  ADMIN
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
}

type UserMaxAggregate {
  id: String
  username: String
  email: String
  avatar: String
  lastName: String
  firstName: String
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companiesId: String
}

type CompaniesCount {
  User: Int!
}

type Companies {
  """Companies ID"""
  id: ID!

  """Companies Name"""
  name: String!

  """Location"""
  location: Location!

  """Address"""
  address: String
  User: [User!]
  _count: CompaniesCount!
}

enum Location {
  CHINA
  EUROPE
  RUSSIA
}

type ManufacturerCount {
  products: Int!
}

"""Manufacturer model"""
type Manufacturer {
  """Manufacturer ID"""
  id: ID!

  """Manufacturer name"""
  name: String!
  products: [Product!]
  _count: ManufacturerCount!
}

"""Order status model"""
type Status {
  """Status ID"""
  id: ID!

  """Order status"""
  status: OrderStatus!

  """Created date"""
  createdAt: DateTime!
  orderId: String!
  userId: String

  """Order"""
  order: Order!

  """User"""
  user: User
}

"""Order status list"""
enum OrderStatus {
  CREATED
  REQUEST
  ADOPTED
  PRICED
  OFFER
  APPROVED
  PURCHASING
  PARTIALLY
  CLOSED
  CANCEL
}

type CommentCount {
  comments: Int!
}

"""Comments on the order model"""
type Comment {
  """Comment ID"""
  id: ID!

  """Comment text"""
  text: String!

  """Comment created date"""
  createdAt: DateTime!
  orderId: String!
  userId: String
  parentId: String

  """Order"""
  order: Order!

  """User """
  user: User

  """Comments on the tree"""
  comment: Comment
  comments: [Comment!]
  _count: CommentCount!
}

type OrderCount {
  statuses: Int!
  items: Int!
  comments: Int!
}

"""Order model"""
type Order {
  """Order ID"""
  id: ID!

  """Delivery Address"""
  address: String

  """Created date"""
  createdAt: DateTime!
  userId: String!
  managerId: String

  """User who created the order"""
  user: User!

  """Order manager"""
  manager: User

  """Order status"""
  statuses: [Status!]
  items: [Item!]
  comments: [Comment!]
  _count: OrderCount!
}

"""The model of the item statuses in the order"""
type StatusItem {
  """Status ID"""
  id: ID!

  """Item status"""
  status: ItemStatus!

  """Created date"""
  createdAt: DateTime!
  itemId: String!
  userId: String

  """Item"""
  item: Item!

  """User"""
  user: User
}

"""Item statuses in the order"""
enum ItemStatus {
  CREATED
  PRICED
  APPROVED
  SUSTOCK
  TRSTOCK
  DELIVERY
  RUSTOCK
  COMPLETED
  UNAVAILABLE
  CANCEL
}

type CommentItemCount {
  comments: Int!
}

"""Comments on the order item"""
type CommentItem {
  """Comment ID"""
  id: ID!

  """Comment text"""
  text: String!

  """Created date"""
  createdAt: DateTime!
  itemId: String!
  userId: String
  parentId: String

  """Item"""
  item: Item!

  """User create"""
  user: User

  """Comments on the tree"""
  comment: CommentItem
  comments: [CommentItem!]
  _count: CommentItemCount!
}

type ItemCount {
  statuses: Int!
  commentItem: Int!
}

"""Item in order model"""
type Item {
  """ID of the order item"""
  id: ID!

  """Quantity"""
  quantity: Int!

  """Margin factor"""
  coefficient: Float!

  """Car number"""
  carNo: String

  """Flight number"""
  routeNo: String

  """Created date"""
  createdAt: DateTime!

  """Updated date"""
  updatedAt: DateTime!
  orderId: String!
  productId: String!
  priceId: String
  userId: String

  """Order"""
  order: Order!

  """Product"""
  product: Product!

  """Product price"""
  price: Price

  """User"""
  user: User

  """Item statuses"""
  statuses: [StatusItem!]
  commentItem: [CommentItem!]
  _count: ItemCount!
}

type SupplierCount {
  prices: Int!
}

"""Supplier model"""
type Supplier {
  """Supplier ID"""
  id: ID!

  """Supplier name"""
  name: String!
  location: Location!
  prices: [Price!]
  _count: SupplierCount!
}

type PriceCount {
  item: Int!
}

"""Products prices model"""
type Price {
  """Price ID"""
  id: ID!

  """Price per unit/piece"""
  price: Decimal!

  """Delivery time in days to the warehouse"""
  duration: Int

  """Site"""
  site: String

  """Comment"""
  comment: String

  """Relevant"""
  relevant: Boolean

  """Created date"""
  createdAt: DateTime!

  """Updated date"""
  updatedAt: DateTime!

  """Price validity date"""
  validAt: DateTime
  productId: String!
  supplierId: String

  """Product"""
  product: Product!
  item: [Item!]
  supplier: Supplier
  _count: PriceCount!
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type AttributeCount {
  products: Int!
}

"""Attribute model"""
type Attribute {
  """Attribude ID"""
  id: ID!

  """Attribute name"""
  name: String!

  """Attribute created date"""
  createdAt: DateTime!

  """Products"""
  products: [AttributeValue!]
  _count: AttributeCount!
}

"""Attribute Values model"""
type AttributeValue {
  """Attribute values ID"""
  id: ID!

  """atribute value"""
  value: String!

  """Created date"""
  createdAt: DateTime!
  productId: String!
  attributeId: String!

  """Product"""
  product: Product!

  """Attribute"""
  attribute: Attribute!
}

type ProductCount {
  prices: Int!
  attributes: Int!
  item: Int!
  images: Int!
}

"""List of available products"""
type Product {
  """Product ID"""
  id: ID!

  """Article number"""
  vendorCode: String!

  """VIN number"""
  vinNumber: String

  """English name"""
  nameEn: String

  """Russian name"""
  nameRu: String

  """Aliases separated by commas"""
  aliases: String

  """The originality of the product"""
  original: Boolean!

  """Goods in stock"""
  stock: Int!

  """Netto weight"""
  netto: Decimal

  """Brutto weight"""
  brutto: Decimal

  """TN VED code"""
  tnved: String

  """Created data"""
  createdAt: DateTime!

  """Update data"""
  updatedAt: DateTime!
  manufacturerId: String

  """Status"""
  Status: ProductStatus!

  """Manufacturer"""
  manufacturer: Manufacturer
  prices: [Price!]

  """Product attribute"""
  attributes: [AttributeValue!]

  """Products in orders"""
  item: [Item!]

  """Products images"""
  images: [File!]
  _count: ProductCount!
}

enum ProductStatus {
  UNCONFIRMED
  CONFIRMED
}

type FileCount {
  products: Int!
}

type File {
  """ID"""
  id: ID!

  """Name"""
  name: String!

  """Bucket name"""
  bucket: String!

  """Path file in bucket"""
  key: String!

  """Created data"""
  createdAt: DateTime!

  """Updated data"""
  updatedAt: DateTime!
  userId: String

  """
  User ID
  If null - system file
  """
  user: User
  products: [Product!]
  _count: FileCount!
}

type User {
  """ID"""
  id: ID!

  """Username"""
  username: String!

  """Email"""
  email: String!

  """Avatar"""
  avatar: String

  """Last Name"""
  lastName: String!

  """First Name"""
  firstName: String!

  """Patronymic"""
  patronymic: String

  """Active user"""
  isActive: Boolean!

  """Company name"""
  companyName: String!

  """TimeZone"""
  tz: String!

  """Phone number"""
  phone: String!

  """Birthday datetime"""
  birthday: DateTime

  """Role"""
  role: Role!

  """Gender"""
  gender: Gender!

  """Register data"""
  createdAt: DateTime!

  """Updated date"""
  updatedAt: DateTime!
  companiesId: String

  """Companies"""
  companies: Companies

  """My files"""
  files: [File!]

  """My orders"""
  orders: [Order!]

  """Orders taken"""
  manageOrders: [Order!]
  status: [Status!]
  item: [Item!]
  statusItem: [StatusItem!]
  comment: [Comment!]
  commentItem: [CommentItem!]
}

type UserLoginType {
  accessToken: String!
  user: User!
}

type CompaniesCountAggregate {
  id: Int!
  name: Int!
  location: Int!
  address: Int!
  _all: Int!
}

type CompaniesMinAggregate {
  id: String
  name: String
  location: Location
  address: String
}

type CompaniesMaxAggregate {
  id: String
  name: String
  location: Location
  address: String
}

type DeleteOrderItemsType {
  """Идентификаторы удаленных записей"""
  deleteIds: [String!]!
}

type ItemCountAggregate {
  id: Int!
  quantity: Int!
  coefficient: Int!
  carNo: Int!
  routeNo: Int!
  createdAt: Int!
  updatedAt: Int!
  orderId: Int!
  productId: Int!
  priceId: Int!
  userId: Int!
  _all: Int!
}

type ItemAvgAggregate {
  quantity: Float
  coefficient: Float
}

type ItemSumAggregate {
  quantity: Int
  coefficient: Float
}

type ItemMinAggregate {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  orderId: String
  productId: String
  priceId: String
  userId: String
}

type ItemMaxAggregate {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  orderId: String
  productId: String
  priceId: String
  userId: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type ItemEdge {
  cursor: String!
  node: Item!
}

type ItemConnectionType {
  edges: [ItemEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductCountAggregate {
  id: Int!
  vendorCode: Int!
  vinNumber: Int!
  nameEn: Int!
  nameRu: Int!
  aliases: Int!
  original: Int!
  stock: Int!
  netto: Int!
  brutto: Int!
  tnved: Int!
  createdAt: Int!
  updatedAt: Int!
  manufacturerId: Int!
  Status: Int!
  _all: Int!
}

type ProductAvgAggregate {
  stock: Float
  netto: Decimal
  brutto: Decimal
}

type ProductSumAggregate {
  stock: Int
  netto: Decimal
  brutto: Decimal
}

type ProductMinAggregate {
  id: String
  vendorCode: String
  vinNumber: String
  nameEn: String
  nameRu: String
  aliases: String
  original: Boolean
  stock: Int
  netto: Decimal
  brutto: Decimal
  tnved: String
  createdAt: DateTime
  updatedAt: DateTime
  manufacturerId: String
  Status: ProductStatus
}

type ProductMaxAggregate {
  id: String
  vendorCode: String
  vinNumber: String
  nameEn: String
  nameRu: String
  aliases: String
  original: Boolean
  stock: Int
  netto: Decimal
  brutto: Decimal
  tnved: String
  createdAt: DateTime
  updatedAt: DateTime
  manufacturerId: String
  Status: ProductStatus
}

type ProductEdge {
  cursor: String!
  node: Product!
}

type ProductConnectionType {
  edges: [ProductEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderCountAggregate {
  id: Int!
  address: Int!
  createdAt: Int!
  userId: Int!
  managerId: Int!
  _all: Int!
}

type OrderMinAggregate {
  id: String
  address: String
  createdAt: DateTime
  userId: String
  managerId: String
}

type OrderMaxAggregate {
  id: String
  address: String
  createdAt: DateTime
  userId: String
  managerId: String
}

type CreateOrderType {
  order: Order!
}

type OrderEdge {
  cursor: String!
  node: Order!
}

type OrderConnectionType {
  edges: [OrderEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type DeleteOrderType {
  """Идентификатор удаленного заказа"""
  id: String!
}

type FileCountAggregate {
  id: Int!
  name: Int!
  bucket: Int!
  key: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  _all: Int!
}

type FileMinAggregate {
  id: String
  name: String
  bucket: String
  key: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
}

type FileMaxAggregate {
  id: String
  name: String
  bucket: String
  key: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
}

type StatusCountAggregate {
  id: Int!
  status: Int!
  createdAt: Int!
  orderId: Int!
  userId: Int!
  _all: Int!
}

type StatusMinAggregate {
  id: String
  status: OrderStatus
  createdAt: DateTime
  orderId: String
  userId: String
}

type StatusMaxAggregate {
  id: String
  status: OrderStatus
  createdAt: DateTime
  orderId: String
  userId: String
}

type Query {
  me: User!
  items(where: ItemWhereInput, orderBy: [ItemOrderByWithRelationInput!], cursor: ItemWhereUniqueInput, take: Int, skip: Int, distinct: [ItemScalarFieldEnum!], after: String, before: String, first: Int, last: Int): ItemConnectionType!
  itemsByLastStatus(
    """Текущий статус позиции"""
    status: ItemStatus!
    where: ItemWhereInput
    orderBy: [ItemOrderByWithRelationInput!]
    cursor: ItemWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ItemScalarFieldEnum!]
    after: String
    before: String
    first: Int
    last: Int
  ): ItemConnectionType!
  products(where: ProductWhereInput, orderBy: [ProductOrderByWithRelationInput!], cursor: ProductWhereUniqueInput, take: Int, skip: Int, distinct: [ProductScalarFieldEnum!], after: String, before: String, first: Int, last: Int): ProductConnectionType!
  order(orderId: String!): Order!
  orders(where: OrderWhereInput, orderBy: [OrderOrderByWithRelationInput!], cursor: OrderWhereUniqueInput, take: Int, skip: Int, distinct: [OrderScalarFieldEnum!], after: String, before: String, first: Int, last: Int): OrderConnectionType!
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: StringFilter
  quantity: IntFilter
  coefficient: FloatFilter
  carNo: StringNullableFilter
  routeNo: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderId: StringFilter
  productId: StringFilter
  priceId: StringNullableFilter
  userId: StringNullableFilter
  order: OrderRelationFilter
  product: ProductRelationFilter
  price: PriceNullableRelationFilter
  user: UserNullableRelationFilter
  statuses: StatusItemListRelationFilter
  commentItem: CommentItemListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: StringFilter
  address: StringNullableFilter
  createdAt: DateTimeFilter
  userId: StringFilter
  managerId: StringNullableFilter
  user: UserRelationFilter
  manager: UserNullableRelationFilter
  statuses: StatusListRelationFilter
  items: ItemListRelationFilter
  comments: CommentListRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  username: StringFilter
  password: StringFilter
  email: StringFilter
  avatar: StringNullableFilter
  lastName: StringFilter
  firstName: StringFilter
  patronymic: StringNullableFilter
  isActive: BoolFilter
  companyName: StringFilter
  tz: StringFilter
  phone: StringFilter
  birthday: DateTimeNullableFilter
  role: EnumRoleFilter
  gender: EnumGenderFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  companiesId: StringNullableFilter
  companies: CompaniesNullableRelationFilter
  files: FileListRelationFilter
  orders: OrderListRelationFilter
  manageOrders: OrderListRelationFilter
  status: StatusListRelationFilter
  item: ItemListRelationFilter
  statusItem: StatusItemListRelationFilter
  comment: CommentListRelationFilter
  commentItem: CommentItemListRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input EnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input NestedEnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input CompaniesNullableRelationFilter {
  is: CompaniesWhereInput
  isNot: CompaniesWhereInput
}

input CompaniesWhereInput {
  AND: [CompaniesWhereInput!]
  OR: [CompaniesWhereInput!]
  NOT: [CompaniesWhereInput!]
  id: StringFilter
  name: StringFilter
  location: EnumLocationFilter
  address: StringNullableFilter
  User: UserListRelationFilter
}

input EnumLocationFilter {
  equals: Location
  in: [Location!]
  notIn: [Location!]
  not: NestedEnumLocationFilter
}

input NestedEnumLocationFilter {
  equals: Location
  in: [Location!]
  notIn: [Location!]
  not: NestedEnumLocationFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input FileListRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: StringFilter
  name: StringFilter
  bucket: StringFilter
  key: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
  user: UserNullableRelationFilter
  products: ProductListRelationFilter
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input ProductListRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: StringFilter
  vendorCode: StringFilter
  vinNumber: StringNullableFilter
  nameEn: StringNullableFilter
  nameRu: StringNullableFilter
  aliases: StringNullableFilter
  original: BoolFilter
  stock: IntFilter
  netto: DecimalNullableFilter
  brutto: DecimalNullableFilter
  tnved: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  manufacturerId: StringNullableFilter
  Status: EnumProductStatusFilter
  manufacturer: ManufacturerNullableRelationFilter
  prices: PriceListRelationFilter
  attributes: AttributeValueListRelationFilter
  item: ItemListRelationFilter
  images: FileListRelationFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalNullableFilter
}

input NestedDecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalNullableFilter
}

input EnumProductStatusFilter {
  equals: ProductStatus
  in: [ProductStatus!]
  notIn: [ProductStatus!]
  not: NestedEnumProductStatusFilter
}

input NestedEnumProductStatusFilter {
  equals: ProductStatus
  in: [ProductStatus!]
  notIn: [ProductStatus!]
  not: NestedEnumProductStatusFilter
}

input ManufacturerNullableRelationFilter {
  is: ManufacturerWhereInput
  isNot: ManufacturerWhereInput
}

input ManufacturerWhereInput {
  AND: [ManufacturerWhereInput!]
  OR: [ManufacturerWhereInput!]
  NOT: [ManufacturerWhereInput!]
  id: StringFilter
  name: StringFilter
  products: ProductListRelationFilter
}

input PriceListRelationFilter {
  every: PriceWhereInput
  some: PriceWhereInput
  none: PriceWhereInput
}

input PriceWhereInput {
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
  id: StringFilter
  price: DecimalFilter
  duration: IntNullableFilter
  site: StringNullableFilter
  comment: StringNullableFilter
  relevant: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  validAt: DateTimeNullableFilter
  productId: StringFilter
  supplierId: StringNullableFilter
  product: ProductRelationFilter
  item: ItemListRelationFilter
  supplier: SupplierNullableRelationFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input NestedDecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

input ItemListRelationFilter {
  every: ItemWhereInput
  some: ItemWhereInput
  none: ItemWhereInput
}

input SupplierNullableRelationFilter {
  is: SupplierWhereInput
  isNot: SupplierWhereInput
}

input SupplierWhereInput {
  AND: [SupplierWhereInput!]
  OR: [SupplierWhereInput!]
  NOT: [SupplierWhereInput!]
  id: StringFilter
  name: StringFilter
  location: EnumLocationFilter
  prices: PriceListRelationFilter
}

input AttributeValueListRelationFilter {
  every: AttributeValueWhereInput
  some: AttributeValueWhereInput
  none: AttributeValueWhereInput
}

input AttributeValueWhereInput {
  AND: [AttributeValueWhereInput!]
  OR: [AttributeValueWhereInput!]
  NOT: [AttributeValueWhereInput!]
  id: StringFilter
  value: StringFilter
  createdAt: DateTimeFilter
  productId: StringFilter
  attributeId: StringFilter
  product: ProductRelationFilter
  attribute: AttributeRelationFilter
}

input AttributeRelationFilter {
  is: AttributeWhereInput
  isNot: AttributeWhereInput
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
  id: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  products: AttributeValueListRelationFilter
}

input OrderListRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input StatusListRelationFilter {
  every: StatusWhereInput
  some: StatusWhereInput
  none: StatusWhereInput
}

input StatusWhereInput {
  AND: [StatusWhereInput!]
  OR: [StatusWhereInput!]
  NOT: [StatusWhereInput!]
  id: StringFilter
  status: EnumOrderStatusFilter
  createdAt: DateTimeFilter
  orderId: StringFilter
  userId: StringNullableFilter
  order: OrderRelationFilter
  user: UserNullableRelationFilter
}

input EnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  notIn: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
}

input NestedEnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  notIn: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
}

input StatusItemListRelationFilter {
  every: StatusItemWhereInput
  some: StatusItemWhereInput
  none: StatusItemWhereInput
}

input StatusItemWhereInput {
  AND: [StatusItemWhereInput!]
  OR: [StatusItemWhereInput!]
  NOT: [StatusItemWhereInput!]
  id: StringFilter
  status: EnumItemStatusFilter
  createdAt: DateTimeFilter
  itemId: StringFilter
  userId: StringNullableFilter
  item: ItemRelationFilter
  user: UserNullableRelationFilter
}

input EnumItemStatusFilter {
  equals: ItemStatus
  in: [ItemStatus!]
  notIn: [ItemStatus!]
  not: NestedEnumItemStatusFilter
}

input NestedEnumItemStatusFilter {
  equals: ItemStatus
  in: [ItemStatus!]
  notIn: [ItemStatus!]
  not: NestedEnumItemStatusFilter
}

input ItemRelationFilter {
  is: ItemWhereInput
  isNot: ItemWhereInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: StringFilter
  text: StringFilter
  createdAt: DateTimeFilter
  orderId: StringFilter
  userId: StringNullableFilter
  parentId: StringNullableFilter
  order: OrderRelationFilter
  user: UserNullableRelationFilter
  comment: CommentNullableRelationFilter
  comments: CommentListRelationFilter
}

input CommentNullableRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

input CommentItemListRelationFilter {
  every: CommentItemWhereInput
  some: CommentItemWhereInput
  none: CommentItemWhereInput
}

input CommentItemWhereInput {
  AND: [CommentItemWhereInput!]
  OR: [CommentItemWhereInput!]
  NOT: [CommentItemWhereInput!]
  id: StringFilter
  text: StringFilter
  createdAt: DateTimeFilter
  itemId: StringFilter
  userId: StringNullableFilter
  parentId: StringNullableFilter
  item: ItemRelationFilter
  user: UserNullableRelationFilter
  comment: CommentItemNullableRelationFilter
  comments: CommentItemListRelationFilter
}

input CommentItemNullableRelationFilter {
  is: CommentItemWhereInput
  isNot: CommentItemWhereInput
}

input PriceNullableRelationFilter {
  is: PriceWhereInput
  isNot: PriceWhereInput
}

input ItemOrderByWithRelationInput {
  id: SortOrder
  quantity: SortOrder
  coefficient: SortOrder
  carNo: SortOrderInput
  routeNo: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  orderId: SortOrder
  productId: SortOrder
  priceId: SortOrderInput
  userId: SortOrderInput
  order: OrderOrderByWithRelationInput
  product: ProductOrderByWithRelationInput
  price: PriceOrderByWithRelationInput
  user: UserOrderByWithRelationInput
  statuses: StatusItemOrderByRelationAggregateInput
  commentItem: CommentItemOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input OrderOrderByWithRelationInput {
  id: SortOrder
  address: SortOrderInput
  createdAt: SortOrder
  userId: SortOrder
  managerId: SortOrderInput
  user: UserOrderByWithRelationInput
  manager: UserOrderByWithRelationInput
  statuses: StatusOrderByRelationAggregateInput
  items: ItemOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
  email: SortOrder
  avatar: SortOrderInput
  lastName: SortOrder
  firstName: SortOrder
  patronymic: SortOrderInput
  isActive: SortOrder
  companyName: SortOrder
  tz: SortOrder
  phone: SortOrder
  birthday: SortOrderInput
  role: SortOrder
  gender: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  companiesId: SortOrderInput
  companies: CompaniesOrderByWithRelationInput
  files: FileOrderByRelationAggregateInput
  orders: OrderOrderByRelationAggregateInput
  manageOrders: OrderOrderByRelationAggregateInput
  status: StatusOrderByRelationAggregateInput
  item: ItemOrderByRelationAggregateInput
  statusItem: StatusItemOrderByRelationAggregateInput
  comment: CommentOrderByRelationAggregateInput
  commentItem: CommentItemOrderByRelationAggregateInput
}

input CompaniesOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  location: SortOrder
  address: SortOrderInput
  User: UserOrderByRelationAggregateInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input FileOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatusOrderByRelationAggregateInput {
  _count: SortOrder
}

input ItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatusItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByWithRelationInput {
  id: SortOrder
  vendorCode: SortOrder
  vinNumber: SortOrderInput
  nameEn: SortOrderInput
  nameRu: SortOrderInput
  aliases: SortOrderInput
  original: SortOrder
  stock: SortOrder
  netto: SortOrderInput
  brutto: SortOrderInput
  tnved: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  manufacturerId: SortOrderInput
  Status: SortOrder
  manufacturer: ManufacturerOrderByWithRelationInput
  prices: PriceOrderByRelationAggregateInput
  attributes: AttributeValueOrderByRelationAggregateInput
  item: ItemOrderByRelationAggregateInput
  images: FileOrderByRelationAggregateInput
}

input ManufacturerOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  products: ProductOrderByRelationAggregateInput
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input PriceOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributeValueOrderByRelationAggregateInput {
  _count: SortOrder
}

input PriceOrderByWithRelationInput {
  id: SortOrder
  price: SortOrder
  duration: SortOrderInput
  site: SortOrderInput
  comment: SortOrderInput
  relevant: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  validAt: SortOrderInput
  productId: SortOrder
  supplierId: SortOrderInput
  product: ProductOrderByWithRelationInput
  item: ItemOrderByRelationAggregateInput
  supplier: SupplierOrderByWithRelationInput
}

input SupplierOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  location: SortOrder
  prices: PriceOrderByRelationAggregateInput
}

input ItemWhereUniqueInput {
  id: String
  orderId_productId_userId: ItemOrderIdProductIdUserIdCompoundUniqueInput
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  quantity: IntFilter
  coefficient: FloatFilter
  carNo: StringNullableFilter
  routeNo: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderId: StringFilter
  productId: StringFilter
  priceId: StringNullableFilter
  userId: StringNullableFilter
  order: OrderRelationFilter
  product: ProductRelationFilter
  price: PriceNullableRelationFilter
  user: UserNullableRelationFilter
  statuses: StatusItemListRelationFilter
  commentItem: CommentItemListRelationFilter
}

input ItemOrderIdProductIdUserIdCompoundUniqueInput {
  orderId: String!
  productId: String!
  userId: String!
}

enum ItemScalarFieldEnum {
  id
  quantity
  coefficient
  carNo
  routeNo
  createdAt
  updatedAt
  orderId
  productId
  priceId
  userId
}

input ProductWhereUniqueInput {
  id: String
  vendorCode: String
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  vinNumber: StringNullableFilter
  nameEn: StringNullableFilter
  nameRu: StringNullableFilter
  aliases: StringNullableFilter
  original: BoolFilter
  stock: IntFilter
  netto: DecimalNullableFilter
  brutto: DecimalNullableFilter
  tnved: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  manufacturerId: StringNullableFilter
  Status: EnumProductStatusFilter
  manufacturer: ManufacturerNullableRelationFilter
  prices: PriceListRelationFilter
  attributes: AttributeValueListRelationFilter
  item: ItemListRelationFilter
  images: FileListRelationFilter
}

enum ProductScalarFieldEnum {
  id
  vendorCode
  vinNumber
  nameEn
  nameRu
  aliases
  original
  stock
  netto
  brutto
  tnved
  createdAt
  updatedAt
  manufacturerId
  Status
}

input OrderWhereUniqueInput {
  id: String
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  address: StringNullableFilter
  createdAt: DateTimeFilter
  userId: StringFilter
  managerId: StringNullableFilter
  user: UserRelationFilter
  manager: UserNullableRelationFilter
  statuses: StatusListRelationFilter
  items: ItemListRelationFilter
  comments: CommentListRelationFilter
}

enum OrderScalarFieldEnum {
  id
  address
  createdAt
  userId
  managerId
}

type Mutation {
  login(userLoginInput: UserLoginInput!): UserLoginType!
  register(userRegisterInput: UserRegisterInput!, companyInput: CompanyInput): UserLoginType
  uploadAvatar(fileId: String!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  addStatusItems(
    """Идентификатор заказа"""
    orderId: String!

    """Идентификаторы позиций"""
    itemIds: [String!]!

    """Статус позиции заказа"""
    status: ItemStatus!
  ): [Item!]!
  recountPrices(
    """Идентификатор заказа"""
    orderId: String!

    """Идентификаторы позиций"""
    itemIds: [String!]!
  ): [Item!]!
  changeCoefficientItems(
    """Идентификатор заказа"""
    orderId: String!

    """Идентификаторы позиций"""
    itemIds: [String!]!

    """Коэффициент"""
    coefficient: Float!
  ): [Item!]!
  changeSellingPriceItem(
    """Идентификатор позиции"""
    itemId: String!

    """Цена продажи"""
    price: Float!
  ): Item!
  changeQuantityItem(
    """Идентификатор позиции"""
    itemId: String!

    """Количество позиций"""
    quantity: Int!
  ): Item!
  deleteOrderItems(
    """Идентификатор заказа"""
    orderId: String!
    where: ItemWhereInput
  ): DeleteOrderItemsType!
  createOrder(order: CreateOrderInput!): CreateOrderType!
  addProductToOrder(product: AddProductInput!): CreateOrderType!
  addNewProductToOrder(
    product: ProductCreateInput!

    """Количество запчастей"""
    quantity: Int!
  ): CreateOrderType!
  deleteOrder(
    """Идентификатор заказа"""
    orderId: String!
  ): DeleteOrderType!
  addStatusOrder(
    """Идентификатор заказа"""
    orderId: String!

    """Статус заказа"""
    status: OrderStatus!
  ): Status!
  unloadOrder(
    """Идентификатор заказа"""
    orderId: String!
  ): File!
}

input UserLoginInput {
  username: String!
  password: String!
}

input UserRegisterInput {
  username: String!
  password: String!
  email: EmailAddress!
  lastName: String!
  firstName: String!
  patronymic: String

  """Date of birthday """
  birthday: DateTime

  """Phone number """
  phone: String!
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input CompanyInput {
  name: String!
  location: Location
  address: String
}

input UpdateUserInput {
  id: String
  email: EmailAddress!
  lastName: String!
  firstName: String!
  patronymic: String

  """Date of birthday """
  birthday: DateTime
}

input CreateOrderInput {
  address: String
  fileId: String!
}

input AddProductInput {
  productId: String!
  quantity: Float!
}

input ProductCreateInput {
  id: String
  vendorCode: String!
  vinNumber: String
  nameEn: String
  nameRu: String
  aliases: String
  original: Boolean
  stock: Int
  netto: Decimal
  brutto: Decimal
  tnved: String
  createdAt: DateTime
  updatedAt: DateTime
  Status: ProductStatus
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput
  prices: PriceCreateNestedManyWithoutProductInput
  attributes: AttributeValueCreateNestedManyWithoutProductInput
  item: ItemCreateNestedManyWithoutProductInput
  images: FileCreateNestedManyWithoutProductsInput
}

input ManufacturerCreateNestedOneWithoutProductsInput {
  create: ManufacturerCreateWithoutProductsInput
  connectOrCreate: ManufacturerCreateOrConnectWithoutProductsInput
  connect: ManufacturerWhereUniqueInput
}

input ManufacturerCreateWithoutProductsInput {
  id: String
  name: String!
}

input ManufacturerCreateOrConnectWithoutProductsInput {
  where: ManufacturerWhereUniqueInput!
  create: ManufacturerCreateWithoutProductsInput!
}

input ManufacturerWhereUniqueInput {
  id: String
  name: String
  AND: [ManufacturerWhereInput!]
  OR: [ManufacturerWhereInput!]
  NOT: [ManufacturerWhereInput!]
  products: ProductListRelationFilter
}

input PriceCreateNestedManyWithoutProductInput {
  create: [PriceCreateWithoutProductInput!]
  connectOrCreate: [PriceCreateOrConnectWithoutProductInput!]
  createMany: PriceCreateManyProductInputEnvelope
  connect: [PriceWhereUniqueInput!]
}

input PriceCreateWithoutProductInput {
  id: String
  price: Decimal!
  duration: Int
  site: String
  comment: String
  relevant: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  validAt: DateTime
  item: ItemCreateNestedManyWithoutPriceInput
  supplier: SupplierCreateNestedOneWithoutPricesInput
}

input ItemCreateNestedManyWithoutPriceInput {
  create: [ItemCreateWithoutPriceInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutPriceInput!]
  createMany: ItemCreateManyPriceInputEnvelope
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutPriceInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutItemsInput!
  product: ProductCreateNestedOneWithoutItemInput!
  user: UserCreateNestedOneWithoutItemInput
  statuses: StatusItemCreateNestedManyWithoutItemInput
  commentItem: CommentItemCreateNestedManyWithoutItemInput
}

input OrderCreateNestedOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connectOrCreate: OrderCreateOrConnectWithoutItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutItemsInput {
  id: String
  address: String
  createdAt: DateTime
  user: UserCreateNestedOneWithoutOrdersInput!
  manager: UserCreateNestedOneWithoutManageOrdersInput
  statuses: StatusCreateNestedManyWithoutOrderInput
  comments: CommentCreateNestedManyWithoutOrderInput
}

input UserCreateNestedOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOrdersInput {
  id: String
  username: String!
  password: String!
  email: EmailAddress!
  avatar: URL
  lastName: String!
  firstName: String!
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String!
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompaniesCreateNestedOneWithoutUserInput
  files: FileCreateNestedManyWithoutUserInput
  manageOrders: OrderCreateNestedManyWithoutManagerInput
  status: StatusCreateNestedManyWithoutUserInput
  item: ItemCreateNestedManyWithoutUserInput
  statusItem: StatusItemCreateNestedManyWithoutUserInput
  comment: CommentCreateNestedManyWithoutUserInput
  commentItem: CommentItemCreateNestedManyWithoutUserInput
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input CompaniesCreateNestedOneWithoutUserInput {
  create: CompaniesCreateWithoutUserInput
  connectOrCreate: CompaniesCreateOrConnectWithoutUserInput
  connect: CompaniesWhereUniqueInput
}

input CompaniesCreateWithoutUserInput {
  id: String
  name: String!
  location: Location
  address: String
}

input CompaniesCreateOrConnectWithoutUserInput {
  where: CompaniesWhereUniqueInput!
  create: CompaniesCreateWithoutUserInput!
}

input CompaniesWhereUniqueInput {
  id: String
  name: String
  AND: [CompaniesWhereInput!]
  OR: [CompaniesWhereInput!]
  NOT: [CompaniesWhereInput!]
  location: EnumLocationFilter
  address: StringNullableFilter
  User: UserListRelationFilter
}

input FileCreateNestedManyWithoutUserInput {
  create: [FileCreateWithoutUserInput!]
  connectOrCreate: [FileCreateOrConnectWithoutUserInput!]
  createMany: FileCreateManyUserInputEnvelope
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutUserInput {
  id: String
  name: String!
  bucket: String!
  key: String!
  createdAt: DateTime
  updatedAt: DateTime
  products: ProductCreateNestedManyWithoutImagesInput
}

input ProductCreateNestedManyWithoutImagesInput {
  create: [ProductCreateWithoutImagesInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutImagesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutImagesInput {
  id: String
  vendorCode: String!
  vinNumber: String
  nameEn: String
  nameRu: String
  aliases: String
  original: Boolean
  stock: Int
  netto: Decimal
  brutto: Decimal
  tnved: String
  createdAt: DateTime
  updatedAt: DateTime
  Status: ProductStatus
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput
  prices: PriceCreateNestedManyWithoutProductInput
  attributes: AttributeValueCreateNestedManyWithoutProductInput
  item: ItemCreateNestedManyWithoutProductInput
}

input AttributeValueCreateNestedManyWithoutProductInput {
  create: [AttributeValueCreateWithoutProductInput!]
  connectOrCreate: [AttributeValueCreateOrConnectWithoutProductInput!]
  createMany: AttributeValueCreateManyProductInputEnvelope
  connect: [AttributeValueWhereUniqueInput!]
}

input AttributeValueCreateWithoutProductInput {
  id: String
  value: String!
  createdAt: DateTime
  attribute: AttributeCreateNestedOneWithoutProductsInput!
}

input AttributeCreateNestedOneWithoutProductsInput {
  create: AttributeCreateWithoutProductsInput
  connectOrCreate: AttributeCreateOrConnectWithoutProductsInput
  connect: AttributeWhereUniqueInput
}

input AttributeCreateWithoutProductsInput {
  id: String
  name: String!
  createdAt: DateTime
}

input AttributeCreateOrConnectWithoutProductsInput {
  where: AttributeWhereUniqueInput!
  create: AttributeCreateWithoutProductsInput!
}

input AttributeWhereUniqueInput {
  id: String
  AND: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  products: AttributeValueListRelationFilter
}

input AttributeValueCreateOrConnectWithoutProductInput {
  where: AttributeValueWhereUniqueInput!
  create: AttributeValueCreateWithoutProductInput!
}

input AttributeValueWhereUniqueInput {
  id: String
  AND: [AttributeValueWhereInput!]
  OR: [AttributeValueWhereInput!]
  NOT: [AttributeValueWhereInput!]
  value: StringFilter
  createdAt: DateTimeFilter
  productId: StringFilter
  attributeId: StringFilter
  product: ProductRelationFilter
  attribute: AttributeRelationFilter
}

input AttributeValueCreateManyProductInputEnvelope {
  data: [AttributeValueCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input AttributeValueCreateManyProductInput {
  id: String
  value: String!
  createdAt: DateTime
  attributeId: String!
}

input ItemCreateNestedManyWithoutProductInput {
  create: [ItemCreateWithoutProductInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutProductInput!]
  createMany: ItemCreateManyProductInputEnvelope
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutProductInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutItemsInput!
  price: PriceCreateNestedOneWithoutItemInput
  user: UserCreateNestedOneWithoutItemInput
  statuses: StatusItemCreateNestedManyWithoutItemInput
  commentItem: CommentItemCreateNestedManyWithoutItemInput
}

input PriceCreateNestedOneWithoutItemInput {
  create: PriceCreateWithoutItemInput
  connectOrCreate: PriceCreateOrConnectWithoutItemInput
  connect: PriceWhereUniqueInput
}

input PriceCreateWithoutItemInput {
  id: String
  price: Decimal!
  duration: Int
  site: String
  comment: String
  relevant: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  validAt: DateTime
  product: ProductCreateNestedOneWithoutPricesInput!
  supplier: SupplierCreateNestedOneWithoutPricesInput
}

input ProductCreateNestedOneWithoutPricesInput {
  create: ProductCreateWithoutPricesInput
  connectOrCreate: ProductCreateOrConnectWithoutPricesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutPricesInput {
  id: String
  vendorCode: String!
  vinNumber: String
  nameEn: String
  nameRu: String
  aliases: String
  original: Boolean
  stock: Int
  netto: Decimal
  brutto: Decimal
  tnved: String
  createdAt: DateTime
  updatedAt: DateTime
  Status: ProductStatus
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput
  attributes: AttributeValueCreateNestedManyWithoutProductInput
  item: ItemCreateNestedManyWithoutProductInput
  images: FileCreateNestedManyWithoutProductsInput
}

input FileCreateNestedManyWithoutProductsInput {
  create: [FileCreateWithoutProductsInput!]
  connectOrCreate: [FileCreateOrConnectWithoutProductsInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutProductsInput {
  id: String
  name: String!
  bucket: String!
  key: String!
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutFilesInput
}

input UserCreateNestedOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  connectOrCreate: UserCreateOrConnectWithoutFilesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFilesInput {
  id: String
  username: String!
  password: String!
  email: EmailAddress!
  avatar: URL
  lastName: String!
  firstName: String!
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String!
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompaniesCreateNestedOneWithoutUserInput
  orders: OrderCreateNestedManyWithoutUserInput
  manageOrders: OrderCreateNestedManyWithoutManagerInput
  status: StatusCreateNestedManyWithoutUserInput
  item: ItemCreateNestedManyWithoutUserInput
  statusItem: StatusItemCreateNestedManyWithoutUserInput
  comment: CommentCreateNestedManyWithoutUserInput
  commentItem: CommentItemCreateNestedManyWithoutUserInput
}

input OrderCreateNestedManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutUserInput!]
  createMany: OrderCreateManyUserInputEnvelope
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutUserInput {
  id: String
  address: String
  createdAt: DateTime
  manager: UserCreateNestedOneWithoutManageOrdersInput
  statuses: StatusCreateNestedManyWithoutOrderInput
  items: ItemCreateNestedManyWithoutOrderInput
  comments: CommentCreateNestedManyWithoutOrderInput
}

input UserCreateNestedOneWithoutManageOrdersInput {
  create: UserCreateWithoutManageOrdersInput
  connectOrCreate: UserCreateOrConnectWithoutManageOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutManageOrdersInput {
  id: String
  username: String!
  password: String!
  email: EmailAddress!
  avatar: URL
  lastName: String!
  firstName: String!
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String!
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompaniesCreateNestedOneWithoutUserInput
  files: FileCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutUserInput
  status: StatusCreateNestedManyWithoutUserInput
  item: ItemCreateNestedManyWithoutUserInput
  statusItem: StatusItemCreateNestedManyWithoutUserInput
  comment: CommentCreateNestedManyWithoutUserInput
  commentItem: CommentItemCreateNestedManyWithoutUserInput
}

input StatusCreateNestedManyWithoutUserInput {
  create: [StatusCreateWithoutUserInput!]
  connectOrCreate: [StatusCreateOrConnectWithoutUserInput!]
  createMany: StatusCreateManyUserInputEnvelope
  connect: [StatusWhereUniqueInput!]
}

input StatusCreateWithoutUserInput {
  id: String
  status: OrderStatus
  createdAt: DateTime
  order: OrderCreateNestedOneWithoutStatusesInput!
}

input OrderCreateNestedOneWithoutStatusesInput {
  create: OrderCreateWithoutStatusesInput
  connectOrCreate: OrderCreateOrConnectWithoutStatusesInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutStatusesInput {
  id: String
  address: String
  createdAt: DateTime
  user: UserCreateNestedOneWithoutOrdersInput!
  manager: UserCreateNestedOneWithoutManageOrdersInput
  items: ItemCreateNestedManyWithoutOrderInput
  comments: CommentCreateNestedManyWithoutOrderInput
}

input ItemCreateNestedManyWithoutOrderInput {
  create: [ItemCreateWithoutOrderInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutOrderInput!]
  createMany: ItemCreateManyOrderInputEnvelope
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutOrderInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  product: ProductCreateNestedOneWithoutItemInput!
  price: PriceCreateNestedOneWithoutItemInput
  user: UserCreateNestedOneWithoutItemInput
  statuses: StatusItemCreateNestedManyWithoutItemInput
  commentItem: CommentItemCreateNestedManyWithoutItemInput
}

input ProductCreateNestedOneWithoutItemInput {
  create: ProductCreateWithoutItemInput
  connectOrCreate: ProductCreateOrConnectWithoutItemInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutItemInput {
  id: String
  vendorCode: String!
  vinNumber: String
  nameEn: String
  nameRu: String
  aliases: String
  original: Boolean
  stock: Int
  netto: Decimal
  brutto: Decimal
  tnved: String
  createdAt: DateTime
  updatedAt: DateTime
  Status: ProductStatus
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput
  prices: PriceCreateNestedManyWithoutProductInput
  attributes: AttributeValueCreateNestedManyWithoutProductInput
  images: FileCreateNestedManyWithoutProductsInput
}

input ProductCreateOrConnectWithoutItemInput {
  where: ProductWhereUniqueInput!
  create: ProductCreateWithoutItemInput!
}

input UserCreateNestedOneWithoutItemInput {
  create: UserCreateWithoutItemInput
  connectOrCreate: UserCreateOrConnectWithoutItemInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutItemInput {
  id: String
  username: String!
  password: String!
  email: EmailAddress!
  avatar: URL
  lastName: String!
  firstName: String!
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String!
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompaniesCreateNestedOneWithoutUserInput
  files: FileCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutUserInput
  manageOrders: OrderCreateNestedManyWithoutManagerInput
  status: StatusCreateNestedManyWithoutUserInput
  statusItem: StatusItemCreateNestedManyWithoutUserInput
  comment: CommentCreateNestedManyWithoutUserInput
  commentItem: CommentItemCreateNestedManyWithoutUserInput
}

input OrderCreateNestedManyWithoutManagerInput {
  create: [OrderCreateWithoutManagerInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutManagerInput!]
  createMany: OrderCreateManyManagerInputEnvelope
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutManagerInput {
  id: String
  address: String
  createdAt: DateTime
  user: UserCreateNestedOneWithoutOrdersInput!
  statuses: StatusCreateNestedManyWithoutOrderInput
  items: ItemCreateNestedManyWithoutOrderInput
  comments: CommentCreateNestedManyWithoutOrderInput
}

input StatusCreateNestedManyWithoutOrderInput {
  create: [StatusCreateWithoutOrderInput!]
  connectOrCreate: [StatusCreateOrConnectWithoutOrderInput!]
  createMany: StatusCreateManyOrderInputEnvelope
  connect: [StatusWhereUniqueInput!]
}

input StatusCreateWithoutOrderInput {
  id: String
  status: OrderStatus
  createdAt: DateTime
  user: UserCreateNestedOneWithoutStatusInput
}

input UserCreateNestedOneWithoutStatusInput {
  create: UserCreateWithoutStatusInput
  connectOrCreate: UserCreateOrConnectWithoutStatusInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStatusInput {
  id: String
  username: String!
  password: String!
  email: EmailAddress!
  avatar: URL
  lastName: String!
  firstName: String!
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String!
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompaniesCreateNestedOneWithoutUserInput
  files: FileCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutUserInput
  manageOrders: OrderCreateNestedManyWithoutManagerInput
  item: ItemCreateNestedManyWithoutUserInput
  statusItem: StatusItemCreateNestedManyWithoutUserInput
  comment: CommentCreateNestedManyWithoutUserInput
  commentItem: CommentItemCreateNestedManyWithoutUserInput
}

input ItemCreateNestedManyWithoutUserInput {
  create: [ItemCreateWithoutUserInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutUserInput!]
  createMany: ItemCreateManyUserInputEnvelope
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutUserInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutItemsInput!
  product: ProductCreateNestedOneWithoutItemInput!
  price: PriceCreateNestedOneWithoutItemInput
  statuses: StatusItemCreateNestedManyWithoutItemInput
  commentItem: CommentItemCreateNestedManyWithoutItemInput
}

input StatusItemCreateNestedManyWithoutItemInput {
  create: [StatusItemCreateWithoutItemInput!]
  connectOrCreate: [StatusItemCreateOrConnectWithoutItemInput!]
  createMany: StatusItemCreateManyItemInputEnvelope
  connect: [StatusItemWhereUniqueInput!]
}

input StatusItemCreateWithoutItemInput {
  id: String
  status: ItemStatus
  createdAt: DateTime
  user: UserCreateNestedOneWithoutStatusItemInput
}

input UserCreateNestedOneWithoutStatusItemInput {
  create: UserCreateWithoutStatusItemInput
  connectOrCreate: UserCreateOrConnectWithoutStatusItemInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStatusItemInput {
  id: String
  username: String!
  password: String!
  email: EmailAddress!
  avatar: URL
  lastName: String!
  firstName: String!
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String!
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompaniesCreateNestedOneWithoutUserInput
  files: FileCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutUserInput
  manageOrders: OrderCreateNestedManyWithoutManagerInput
  status: StatusCreateNestedManyWithoutUserInput
  item: ItemCreateNestedManyWithoutUserInput
  comment: CommentCreateNestedManyWithoutUserInput
  commentItem: CommentItemCreateNestedManyWithoutUserInput
}

input CommentCreateNestedManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutUserInput {
  id: String
  text: String!
  createdAt: DateTime
  order: OrderCreateNestedOneWithoutCommentsInput!
  comment: CommentCreateNestedOneWithoutCommentsInput
  comments: CommentCreateNestedManyWithoutCommentInput
}

input OrderCreateNestedOneWithoutCommentsInput {
  create: OrderCreateWithoutCommentsInput
  connectOrCreate: OrderCreateOrConnectWithoutCommentsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCommentsInput {
  id: String
  address: String
  createdAt: DateTime
  user: UserCreateNestedOneWithoutOrdersInput!
  manager: UserCreateNestedOneWithoutManageOrdersInput
  statuses: StatusCreateNestedManyWithoutOrderInput
  items: ItemCreateNestedManyWithoutOrderInput
}

input OrderCreateOrConnectWithoutCommentsInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutCommentsInput!
}

input CommentCreateNestedOneWithoutCommentsInput {
  create: CommentCreateWithoutCommentsInput
  connectOrCreate: CommentCreateOrConnectWithoutCommentsInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutCommentsInput {
  id: String
  text: String!
  createdAt: DateTime
  order: OrderCreateNestedOneWithoutCommentsInput!
  user: UserCreateNestedOneWithoutCommentInput
  comment: CommentCreateNestedOneWithoutCommentsInput
}

input UserCreateNestedOneWithoutCommentInput {
  create: UserCreateWithoutCommentInput
  connectOrCreate: UserCreateOrConnectWithoutCommentInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentInput {
  id: String
  username: String!
  password: String!
  email: EmailAddress!
  avatar: URL
  lastName: String!
  firstName: String!
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String!
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompaniesCreateNestedOneWithoutUserInput
  files: FileCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutUserInput
  manageOrders: OrderCreateNestedManyWithoutManagerInput
  status: StatusCreateNestedManyWithoutUserInput
  item: ItemCreateNestedManyWithoutUserInput
  statusItem: StatusItemCreateNestedManyWithoutUserInput
  commentItem: CommentItemCreateNestedManyWithoutUserInput
}

input StatusItemCreateNestedManyWithoutUserInput {
  create: [StatusItemCreateWithoutUserInput!]
  connectOrCreate: [StatusItemCreateOrConnectWithoutUserInput!]
  createMany: StatusItemCreateManyUserInputEnvelope
  connect: [StatusItemWhereUniqueInput!]
}

input StatusItemCreateWithoutUserInput {
  id: String
  status: ItemStatus
  createdAt: DateTime
  item: ItemCreateNestedOneWithoutStatusesInput!
}

input ItemCreateNestedOneWithoutStatusesInput {
  create: ItemCreateWithoutStatusesInput
  connectOrCreate: ItemCreateOrConnectWithoutStatusesInput
  connect: ItemWhereUniqueInput
}

input ItemCreateWithoutStatusesInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutItemsInput!
  product: ProductCreateNestedOneWithoutItemInput!
  price: PriceCreateNestedOneWithoutItemInput
  user: UserCreateNestedOneWithoutItemInput
  commentItem: CommentItemCreateNestedManyWithoutItemInput
}

input CommentItemCreateNestedManyWithoutItemInput {
  create: [CommentItemCreateWithoutItemInput!]
  connectOrCreate: [CommentItemCreateOrConnectWithoutItemInput!]
  createMany: CommentItemCreateManyItemInputEnvelope
  connect: [CommentItemWhereUniqueInput!]
}

input CommentItemCreateWithoutItemInput {
  id: String
  text: String!
  createdAt: DateTime
  user: UserCreateNestedOneWithoutCommentItemInput
  comment: CommentItemCreateNestedOneWithoutCommentsInput
  comments: CommentItemCreateNestedManyWithoutCommentInput
}

input UserCreateNestedOneWithoutCommentItemInput {
  create: UserCreateWithoutCommentItemInput
  connectOrCreate: UserCreateOrConnectWithoutCommentItemInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentItemInput {
  id: String
  username: String!
  password: String!
  email: EmailAddress!
  avatar: URL
  lastName: String!
  firstName: String!
  patronymic: String
  isActive: Boolean
  companyName: String
  tz: String
  phone: String!
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompaniesCreateNestedOneWithoutUserInput
  files: FileCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutUserInput
  manageOrders: OrderCreateNestedManyWithoutManagerInput
  status: StatusCreateNestedManyWithoutUserInput
  item: ItemCreateNestedManyWithoutUserInput
  statusItem: StatusItemCreateNestedManyWithoutUserInput
  comment: CommentCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutCommentItemInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCommentItemInput!
}

input UserWhereUniqueInput {
  id: String
  username: String
  email: EmailAddress
  phone: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  password: StringFilter
  avatar: StringNullableFilter
  lastName: StringFilter
  firstName: StringFilter
  patronymic: StringNullableFilter
  isActive: BoolFilter
  companyName: StringFilter
  tz: StringFilter
  birthday: DateTimeNullableFilter
  role: EnumRoleFilter
  gender: EnumGenderFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  companiesId: StringNullableFilter
  companies: CompaniesNullableRelationFilter
  files: FileListRelationFilter
  orders: OrderListRelationFilter
  manageOrders: OrderListRelationFilter
  status: StatusListRelationFilter
  item: ItemListRelationFilter
  statusItem: StatusItemListRelationFilter
  comment: CommentListRelationFilter
  commentItem: CommentItemListRelationFilter
}

input CommentItemCreateNestedOneWithoutCommentsInput {
  create: CommentItemCreateWithoutCommentsInput
  connectOrCreate: CommentItemCreateOrConnectWithoutCommentsInput
  connect: CommentItemWhereUniqueInput
}

input CommentItemCreateWithoutCommentsInput {
  id: String
  text: String!
  createdAt: DateTime
  item: ItemCreateNestedOneWithoutCommentItemInput!
  user: UserCreateNestedOneWithoutCommentItemInput
  comment: CommentItemCreateNestedOneWithoutCommentsInput
}

input ItemCreateNestedOneWithoutCommentItemInput {
  create: ItemCreateWithoutCommentItemInput
  connectOrCreate: ItemCreateOrConnectWithoutCommentItemInput
  connect: ItemWhereUniqueInput
}

input ItemCreateWithoutCommentItemInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutItemsInput!
  product: ProductCreateNestedOneWithoutItemInput!
  price: PriceCreateNestedOneWithoutItemInput
  user: UserCreateNestedOneWithoutItemInput
  statuses: StatusItemCreateNestedManyWithoutItemInput
}

input ItemCreateOrConnectWithoutCommentItemInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutCommentItemInput!
}

input CommentItemCreateOrConnectWithoutCommentsInput {
  where: CommentItemWhereUniqueInput!
  create: CommentItemCreateWithoutCommentsInput!
}

input CommentItemWhereUniqueInput {
  id: String
  AND: [CommentItemWhereInput!]
  OR: [CommentItemWhereInput!]
  NOT: [CommentItemWhereInput!]
  text: StringFilter
  createdAt: DateTimeFilter
  itemId: StringFilter
  userId: StringNullableFilter
  parentId: StringNullableFilter
  item: ItemRelationFilter
  user: UserNullableRelationFilter
  comment: CommentItemNullableRelationFilter
  comments: CommentItemListRelationFilter
}

input CommentItemCreateNestedManyWithoutCommentInput {
  create: [CommentItemCreateWithoutCommentInput!]
  connectOrCreate: [CommentItemCreateOrConnectWithoutCommentInput!]
  createMany: CommentItemCreateManyCommentInputEnvelope
  connect: [CommentItemWhereUniqueInput!]
}

input CommentItemCreateWithoutCommentInput {
  id: String
  text: String!
  createdAt: DateTime
  item: ItemCreateNestedOneWithoutCommentItemInput!
  user: UserCreateNestedOneWithoutCommentItemInput
  comments: CommentItemCreateNestedManyWithoutCommentInput
}

input CommentItemCreateOrConnectWithoutCommentInput {
  where: CommentItemWhereUniqueInput!
  create: CommentItemCreateWithoutCommentInput!
}

input CommentItemCreateManyCommentInputEnvelope {
  data: [CommentItemCreateManyCommentInput!]!
  skipDuplicates: Boolean
}

input CommentItemCreateManyCommentInput {
  id: String
  text: String!
  createdAt: DateTime
  itemId: String!
  userId: String
}

input CommentItemCreateOrConnectWithoutItemInput {
  where: CommentItemWhereUniqueInput!
  create: CommentItemCreateWithoutItemInput!
}

input CommentItemCreateManyItemInputEnvelope {
  data: [CommentItemCreateManyItemInput!]!
  skipDuplicates: Boolean
}

input CommentItemCreateManyItemInput {
  id: String
  text: String!
  createdAt: DateTime
  userId: String
  parentId: String
}

input ItemCreateOrConnectWithoutStatusesInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutStatusesInput!
}

input StatusItemCreateOrConnectWithoutUserInput {
  where: StatusItemWhereUniqueInput!
  create: StatusItemCreateWithoutUserInput!
}

input StatusItemWhereUniqueInput {
  id: String
  AND: [StatusItemWhereInput!]
  OR: [StatusItemWhereInput!]
  NOT: [StatusItemWhereInput!]
  status: EnumItemStatusFilter
  createdAt: DateTimeFilter
  itemId: StringFilter
  userId: StringNullableFilter
  item: ItemRelationFilter
  user: UserNullableRelationFilter
}

input StatusItemCreateManyUserInputEnvelope {
  data: [StatusItemCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StatusItemCreateManyUserInput {
  id: String
  status: ItemStatus
  createdAt: DateTime
  itemId: String!
}

input CommentItemCreateNestedManyWithoutUserInput {
  create: [CommentItemCreateWithoutUserInput!]
  connectOrCreate: [CommentItemCreateOrConnectWithoutUserInput!]
  createMany: CommentItemCreateManyUserInputEnvelope
  connect: [CommentItemWhereUniqueInput!]
}

input CommentItemCreateWithoutUserInput {
  id: String
  text: String!
  createdAt: DateTime
  item: ItemCreateNestedOneWithoutCommentItemInput!
  comment: CommentItemCreateNestedOneWithoutCommentsInput
  comments: CommentItemCreateNestedManyWithoutCommentInput
}

input CommentItemCreateOrConnectWithoutUserInput {
  where: CommentItemWhereUniqueInput!
  create: CommentItemCreateWithoutUserInput!
}

input CommentItemCreateManyUserInputEnvelope {
  data: [CommentItemCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CommentItemCreateManyUserInput {
  id: String
  text: String!
  createdAt: DateTime
  itemId: String!
  parentId: String
}

input UserCreateOrConnectWithoutCommentInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCommentInput!
}

input CommentCreateOrConnectWithoutCommentsInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutCommentsInput!
}

input CommentWhereUniqueInput {
  id: String
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  text: StringFilter
  createdAt: DateTimeFilter
  orderId: StringFilter
  userId: StringNullableFilter
  parentId: StringNullableFilter
  order: OrderRelationFilter
  user: UserNullableRelationFilter
  comment: CommentNullableRelationFilter
  comments: CommentListRelationFilter
}

input CommentCreateNestedManyWithoutCommentInput {
  create: [CommentCreateWithoutCommentInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutCommentInput!]
  createMany: CommentCreateManyCommentInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutCommentInput {
  id: String
  text: String!
  createdAt: DateTime
  order: OrderCreateNestedOneWithoutCommentsInput!
  user: UserCreateNestedOneWithoutCommentInput
  comments: CommentCreateNestedManyWithoutCommentInput
}

input CommentCreateOrConnectWithoutCommentInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutCommentInput!
}

input CommentCreateManyCommentInputEnvelope {
  data: [CommentCreateManyCommentInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyCommentInput {
  id: String
  text: String!
  createdAt: DateTime
  orderId: String!
  userId: String
}

input CommentCreateOrConnectWithoutUserInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutUserInput!
}

input CommentCreateManyUserInputEnvelope {
  data: [CommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyUserInput {
  id: String
  text: String!
  createdAt: DateTime
  orderId: String!
  parentId: String
}

input UserCreateOrConnectWithoutStatusItemInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutStatusItemInput!
}

input StatusItemCreateOrConnectWithoutItemInput {
  where: StatusItemWhereUniqueInput!
  create: StatusItemCreateWithoutItemInput!
}

input StatusItemCreateManyItemInputEnvelope {
  data: [StatusItemCreateManyItemInput!]!
  skipDuplicates: Boolean
}

input StatusItemCreateManyItemInput {
  id: String
  status: ItemStatus
  createdAt: DateTime
  userId: String
}

input ItemCreateOrConnectWithoutUserInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutUserInput!
}

input ItemCreateManyUserInputEnvelope {
  data: [ItemCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ItemCreateManyUserInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  orderId: String!
  productId: String!
  priceId: String
}

input UserCreateOrConnectWithoutStatusInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutStatusInput!
}

input StatusCreateOrConnectWithoutOrderInput {
  where: StatusWhereUniqueInput!
  create: StatusCreateWithoutOrderInput!
}

input StatusWhereUniqueInput {
  id: String
  AND: [StatusWhereInput!]
  OR: [StatusWhereInput!]
  NOT: [StatusWhereInput!]
  status: EnumOrderStatusFilter
  createdAt: DateTimeFilter
  orderId: StringFilter
  userId: StringNullableFilter
  order: OrderRelationFilter
  user: UserNullableRelationFilter
}

input StatusCreateManyOrderInputEnvelope {
  data: [StatusCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input StatusCreateManyOrderInput {
  id: String
  status: OrderStatus
  createdAt: DateTime
  userId: String
}

input CommentCreateNestedManyWithoutOrderInput {
  create: [CommentCreateWithoutOrderInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOrderInput!]
  createMany: CommentCreateManyOrderInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutOrderInput {
  id: String
  text: String!
  createdAt: DateTime
  user: UserCreateNestedOneWithoutCommentInput
  comment: CommentCreateNestedOneWithoutCommentsInput
  comments: CommentCreateNestedManyWithoutCommentInput
}

input CommentCreateOrConnectWithoutOrderInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutOrderInput!
}

input CommentCreateManyOrderInputEnvelope {
  data: [CommentCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyOrderInput {
  id: String
  text: String!
  createdAt: DateTime
  userId: String
  parentId: String
}

input OrderCreateOrConnectWithoutManagerInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutManagerInput!
}

input OrderCreateManyManagerInputEnvelope {
  data: [OrderCreateManyManagerInput!]!
  skipDuplicates: Boolean
}

input OrderCreateManyManagerInput {
  id: String
  address: String
  createdAt: DateTime
  userId: String!
}

input UserCreateOrConnectWithoutItemInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutItemInput!
}

input ItemCreateOrConnectWithoutOrderInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutOrderInput!
}

input ItemCreateManyOrderInputEnvelope {
  data: [ItemCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input ItemCreateManyOrderInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  productId: String!
  priceId: String
  userId: String
}

input OrderCreateOrConnectWithoutStatusesInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutStatusesInput!
}

input StatusCreateOrConnectWithoutUserInput {
  where: StatusWhereUniqueInput!
  create: StatusCreateWithoutUserInput!
}

input StatusCreateManyUserInputEnvelope {
  data: [StatusCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StatusCreateManyUserInput {
  id: String
  status: OrderStatus
  createdAt: DateTime
  orderId: String!
}

input UserCreateOrConnectWithoutManageOrdersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutManageOrdersInput!
}

input OrderCreateOrConnectWithoutUserInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutUserInput!
}

input OrderCreateManyUserInputEnvelope {
  data: [OrderCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input OrderCreateManyUserInput {
  id: String
  address: String
  createdAt: DateTime
  managerId: String
}

input UserCreateOrConnectWithoutFilesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutFilesInput!
}

input FileCreateOrConnectWithoutProductsInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutProductsInput!
}

input FileWhereUniqueInput {
  id: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  name: StringFilter
  bucket: StringFilter
  key: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
  user: UserNullableRelationFilter
  products: ProductListRelationFilter
}

input ProductCreateOrConnectWithoutPricesInput {
  where: ProductWhereUniqueInput!
  create: ProductCreateWithoutPricesInput!
}

input SupplierCreateNestedOneWithoutPricesInput {
  create: SupplierCreateWithoutPricesInput
  connectOrCreate: SupplierCreateOrConnectWithoutPricesInput
  connect: SupplierWhereUniqueInput
}

input SupplierCreateWithoutPricesInput {
  id: String
  name: String!
  location: Location
}

input SupplierCreateOrConnectWithoutPricesInput {
  where: SupplierWhereUniqueInput!
  create: SupplierCreateWithoutPricesInput!
}

input SupplierWhereUniqueInput {
  id: String
  AND: [SupplierWhereInput!]
  OR: [SupplierWhereInput!]
  NOT: [SupplierWhereInput!]
  name: StringFilter
  location: EnumLocationFilter
  prices: PriceListRelationFilter
}

input PriceCreateOrConnectWithoutItemInput {
  where: PriceWhereUniqueInput!
  create: PriceCreateWithoutItemInput!
}

input PriceWhereUniqueInput {
  id: String
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
  price: DecimalFilter
  duration: IntNullableFilter
  site: StringNullableFilter
  comment: StringNullableFilter
  relevant: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  validAt: DateTimeNullableFilter
  productId: StringFilter
  supplierId: StringNullableFilter
  product: ProductRelationFilter
  item: ItemListRelationFilter
  supplier: SupplierNullableRelationFilter
}

input ItemCreateOrConnectWithoutProductInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutProductInput!
}

input ItemCreateManyProductInputEnvelope {
  data: [ItemCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input ItemCreateManyProductInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  orderId: String!
  priceId: String
  userId: String
}

input ProductCreateOrConnectWithoutImagesInput {
  where: ProductWhereUniqueInput!
  create: ProductCreateWithoutImagesInput!
}

input FileCreateOrConnectWithoutUserInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutUserInput!
}

input FileCreateManyUserInputEnvelope {
  data: [FileCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input FileCreateManyUserInput {
  id: String
  name: String!
  bucket: String!
  key: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutOrdersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutOrdersInput!
}

input OrderCreateOrConnectWithoutItemsInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutItemsInput!
}

input ItemCreateOrConnectWithoutPriceInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutPriceInput!
}

input ItemCreateManyPriceInputEnvelope {
  data: [ItemCreateManyPriceInput!]!
  skipDuplicates: Boolean
}

input ItemCreateManyPriceInput {
  id: String
  quantity: Int
  coefficient: Float
  carNo: String
  routeNo: String
  createdAt: DateTime
  updatedAt: DateTime
  orderId: String!
  productId: String!
  userId: String
}

input PriceCreateOrConnectWithoutProductInput {
  where: PriceWhereUniqueInput!
  create: PriceCreateWithoutProductInput!
}

input PriceCreateManyProductInputEnvelope {
  data: [PriceCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input PriceCreateManyProductInput {
  id: String
  price: Decimal!
  duration: Int
  site: String
  comment: String
  relevant: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  validAt: DateTime
  supplierId: String
}